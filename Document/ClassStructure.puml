@startuml

'theme 목록 : https://plantuml.com/ko/theme'
!theme vibrant

'skinparam 목록 : https://plantuml.com/ko/skinparam'
skinparam ClassFontSize 20
skinparam ClassFontColor Black
skinparam ClassAttributeFontSize 12
skinparam ArrowColor Black
skinparam ArrowThickness 2

hide empty methods
hide empty fields



rectangle Windows {
    class MainWindow {
        프로그램 실행시 제일 먼저 보이는 윈도우
        <img src=Images/MainWindow.png{scale=1.5}>
    }

    class InformationWindow<<Singleton>> {
        "만든 사람" 버튼을 더블 클릭하면
        보여주는 윈도우
    }

    class ImageDisplayWindow<<Singleton>> {
        드래그 앤 드랍된 이미지를
        더블클릭하면 보여주는 윈도우
    }

    MainWindow .u.> InformationWindow
    MainWindow .u.> ImageDisplayWindow
}


rectangle Consumer {

    class ObservableCollectionConsumer {
        ObservableJob을 수행하기 위한 외부 쓰레드로
        백그라운드로 동작하게된다.

        동기화 큐를 가지고 있어서 다른 쓰레드에서
        ObservableJob을 생성해서 넣어주면
        동기화 큐에서 꺼내서 해당 작업을 수행하게 된다.

        이 프로그램에서는 이미지 관련 처리를 수행하기 때문에
        PhotoConsumerJobFactory에서 생성된 ObservableJob
        들에 대해서 처리를 수행한다.
    }

    rectangle Job {
        note bottom of Job {
            ObservableCollection에 대해서 수행하는 작업
            에 대해 정의한다.

            ObservableCollection은 이미지 목록과 같이
            UI와 동기화되어 관리되는 자료구조라고 생각하면 된다.
        }

        abstract class ObservableJob {
            ObservableCollection에 대해서
            <b>비동기적</b>으로 수행되는 작업의 단위를 의미한다.
        }

        abstract class ObservableJobCreate {
            비동기적으로 수행되는 <b>생성</b>작업을 나타낸다.
        }

        abstract class ObservableJobUpdate {
            비동기적으로 수행되는 <b>변경</b>작업을 나타낸다.
        }

        class CreateMultiJob {
            순서 상관없이 여러 원소들을 동시에
            <b>생성</b>해서 추가해주는 작업을 말한다.
        }

        class CreateSingleJob {
            순차적으로 한번에 하나씩만 <b>생성</b>해서 추가해주는 작업
        }

        class UpdateMultiJob {
            순서 상관없이 여러 원소들을 동시에
            <b>변경</b>해주는 작업
        }

        class UpdateSingleJob {
            순차적으로 한번에 하나씩만 <b>변경</b>해주는 작업
        }

        interface IMultiJob {
            쓰레드풀에서 실행되는
            작업임을 나타냄
        }
    }

    ObservableJobCreate -u-|> ObservableJob
    ObservableJobUpdate -u-|> ObservableJob

    CreateMultiJob -u-|> ObservableJobCreate
    CreateSingleJob -u-|>  ObservableJobCreate

    UpdateMultiJob -u-|> ObservableJobUpdate
    UpdateSingleJob -u-|>  ObservableJobUpdate

    CreateMultiJob -u-|> IMultiJob
    UpdateMultiJob -u-|> IMultiJob

    ObservableCollectionConsumer --* Job : 사용 및 소멸
    ObservableCollectionConsumer ..> ObservableCollection : 참조
}

rectangle Entity {

    class ObservableCollection<T> {

    }

    note bottom of Entity {
        WPF에서 바인딩된 객체에 대한
        객체를 다룬다.

        우선 관련 이 프로그램이 이미지 처리와 관련된
        프로그램이라 Photo와 관련된 클래스만 있다.
    }

    class PhotoCollection {
        리스트박스 컨트롤에 바인딩된 클래스
    }

    class Photo {
        리스트박스 아이템 컨트롤에 바인딩된 클래스
    }

    class PhotoConsumerJobFactory {
        Photo와 관련된 ObservableJob을
        생성하는 기능을 수행한다.
    }

    PhotoCollection --* Photo
    PhotoCollection -u-|> ObservableCollection
    PhotoConsumerJobFactory --* Job : 생성
}



rectangle Image {


    class ImageWrapper {
        모든 이미지 포멧을 다루기위한
        확장 클래스
    }
    class ImageWrapperGeneral {
        BMP, TIFF, GIF, JPEG 등
        보편적인 이미지 포맷을 다루는 클래스
    }
    class ImageWrapperIcon {
        ICO 이미지 포맷을 다루는 클래스
    }

    enum ImageFormat {
        ===ICO
        ===TIFF
        ===JPG
        ===BMP
        ...등등
    }

    class ImageConverter {
        이미지 포맷 변환을 직접적으로
        수행해주는 <b>정적</b> 클래스
    }

    ImageWrapperGeneral -u-|> ImageWrapper
    ImageWrapperIcon -u-|> ImageWrapper
    ImageWrapper -r-> ImageFormat

    ImageWrapperIcon .d.> ImageConverter : 기능만 사용
    ImageWrapperGeneral .d.> ImageConverter : 기능만 사용

    Photo --> ImageWrapper
}





@enduml